{"version":3,"sources":["webpack://dom-diff/./src/js/Element.js","webpack://dom-diff/./src/js/virtualDom.js","webpack://dom-diff/./src/js/patchTypes.js","webpack://dom-diff/./src/js/domDiff.js","webpack://dom-diff/./src/js/doPatch.js","webpack://dom-diff/./src/js/index.js"],"names":["type","props","children","this","createElement","setAttrs","node","prop","value","tagName","setAttribute","style","cssText","render","vDom","el","document","key","map","c","createTextNode","appendChild","ATTR","TEXT","REPLACE","REMOVE","patches","vnIndex","vNodeWalk","oldNode","newNode","index","vnPatch","push","text","attrPatch","oldAttrs","newAttrs","hasOwnProperty","attrsWalk","Object","keys","length","attrs","oldChildren","newChildren","idx","finalPatches","rnIndex","rNodeWalk","rNode","rnPatch","childNodes","p","removeAttribute","textContent","parentNode","replaceChild","removeChild","patchAction","vDom1","class","vDom2","rDom","rootEl","getElementById","renderDOM","console","log"],"mappings":"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","file":"bundle.js","sourcesContent":["class Element {\n  constructor (type, props, children) {\n    this.type = type;\n    this.props = props;\n    this.children = children;\n  }\n}\n\nexport default Element;","import Element from './Element';\n\nfunction createElement (type, props, children) {\n  return new Element(type, props, children);\n}\n\nfunction setAttrs (node, prop, value) {\n  switch (prop) {\n    case 'value':\n      if (node.tagName === 'INPUT' || node.tagName === 'TEXTAREA') {\n        node.value = value;\n      } else {\n        node.setAttribute(prop, value);\n      }\n      break;\n    case 'style':\n      node.style.cssText = value;\n      break;\n    default:\n      node.setAttribute(prop, value);\n      break;\n  }\n}\n\nfunction render (vDom) {\n  const { type, props, children } = vDom,\n        el = document.createElement(type);\n  \n  for (let key in  props) {\n    setAttrs(el, key, props[key]);\n  }\n  \n  children.map((c) => {\n    c = c instanceof Element\n        ?\n        render(c)\n        :\n        document.createTextNode(c);\n    \n    el.appendChild(c);\n  });\n  return el;\n}\n\nfunction renderDOM (rDom, rootEl) {\n  rootEl.appendChild(rDom);\n}\n\nexport {\n  createElement,\n  render,\n  setAttrs,\n  renderDOM\n}","export const ATTR = 'ATTR';\nexport const TEXT = 'TEXT';\nexport const REPLACE = 'REPLACE';\nexport const REMOVE = 'REMOVE';","import {\n  ATTR,\n  TEXT,\n  REPLACE,\n  REMOVE\n} from './patchTypes';\n\nlet patches = {},\n    vnIndex = 0;\n\nfunction domDiff (oldVDom, newVDom) {\n  let index = 0;\n  vNodeWalk(oldVDom, newVDom, index);\n  return patches;\n}\n\nfunction vNodeWalk (oldNode, newNode, index) {\n  let vnPatch = [];\n\n  if (!newNode) {\n    vnPatch.push({\n      type: REMOVE,\n      index\n    })\n  } else if (typeof oldNode === 'string' && typeof newNode === 'string') {\n    if (oldNode !== newNode) {\n      vnPatch.push({\n        type: TEXT,\n        text: newNode\n      })\n    }\n  } else if (oldNode.type === newNode.type) {\n    const attrPatch = attrsWalk(oldNode.props, newNode.props);\n\n    if (Object.keys(attrPatch).length > 0) {\n      vnPatch.push({\n        type: ATTR,\n        attrs: attrPatch\n      });\n    }\n\n    childrenWalk(oldNode.children, newNode.children);\n  } else {\n    vnPatch.push({\n      type: REPLACE,\n      newNode\n    })\n  }\n\n  if (vnPatch.length > 0) {\n    patches[index] = vnPatch;\n  }\n}\n\nfunction attrsWalk (oldAttrs, newAttrs) {\n  let attrPatch = {};\n\n  for (let key in oldAttrs) {\n    // 修改属性\n    if (oldAttrs[key] !== newAttrs[key]) {\n      attrPatch[key] = newAttrs[key];\n    }\n  }\n\n  for (let key in newAttrs) {\n    // 新增\n    if (!oldAttrs.hasOwnProperty(key)) {\n      attrPatch[key] = newAttrs[key];\n    }\n  }\n\n  return attrPatch;\n}\n\nfunction childrenWalk (oldChildren, newChildren) {\n  oldChildren.map((c, idx) => {\n    vNodeWalk(c, newChildren[idx], ++ vnIndex);\n  });\n}\n\nexport default domDiff;","import {\n  ATTR,\n  TEXT,\n  REPLACE,\n  REMOVE\n} from './patchTypes';\nimport { setAttrs, render } from './virtualDom';\nimport Element from './Element';\n\nlet finalPatches = {},\n    rnIndex = 0;\n\nfunction doPatch (rDom, patches) {\n  finalPatches = patches;\n  rNodeWalk(rDom);\n}\n\nfunction rNodeWalk (rNode) {\n  const rnPatch = finalPatches[rnIndex ++],\n        childNodes = rNode.childNodes;\n  \n  [...childNodes].map((c) => {\n    rNodeWalk(c);\n  });\n\n  if (rnPatch) {\n    patchAction(rNode, rnPatch);\n  }\n}\n\nfunction patchAction (rNode, rnPatch) {\n  rnPatch.map((p) => {\n    switch (p.type) {\n      case ATTR:\n        for (let key in p.attrs) {\n          const value = p.attrs[key];\n\n          if (value) {\n            setAttrs(rNode, key, value);\n          } else {\n            rNode.removeAttribute(key);\n          }\n        }\n        break;\n      case TEXT:\n        rNode.textContent = p.text;\n        break;\n      case REPLACE:\n        const newNode = (p.newNode instanceof Element)\n                      ? render(p.newNode)\n                      : document.createTextNode(p.newNode);\n        \n        rNode.parentNode.replaceChild(newNode, rNode);\n        break;\n      case REMOVE:\n        rNode.parentNode.removeChild(rNode);\n        break;\n      default:\n        break;\n    }\n  });\n}\n\nexport default doPatch;\n\n// vNode = virtual Node\n// vnPatch = virtual Node patch\n// rNode = real Node\n// rnPatch = real Node patch","import { createElement, render, renderDOM } from './virtualDom';\nimport domDiff from './domDiff';\nimport doPatch from './doPatch';\n\nconst vDom1 = createElement('ul', { \n    class: 'list', \n    style: 'width: 300px; height: 300px; background-color: orange'\n  }, [\n    createElement('li', { \n      class: 'item', \n      'data-index': 0 \n    }, [\n      createElement('p', { \n        class: 'text'\n      }, [\n        '第1个列表项'\n      ])\n    ]),\n    createElement('li', { \n      class: 'item', \n      'data-index': 1\n    }, [\n      createElement('p', { \n        class: 'text'\n      }, [\n        createElement('span', { \n          class: 'title' \n        }, [])\n      ])\n    ]),\n    createElement('li', { \n      class: 'item', \n      'data-index': 2\n    }, [\n      '第3个列表项'\n    ])\n  ]);\n  \nconst vDom2 = createElement('ul', {\n  class: 'list-wrap',\n  style: 'width: 300px; height: 300px; background-color: orange'\n}, [\n  createElement('li', {\n    class: 'item',\n    'data-index': 0\n  }, [\n    createElement('p', {\n      class: 'title'\n    }, [\n      '特殊列表项'\n    ])\n  ]),\n  createElement('li', {\n    class: 'item',\n    'data-index': 1\n  }, [\n    createElement('p', {\n      class: 'text'\n    }, [])\n  ]),\n  createElement('div', {\n    class: 'item',\n    'data-index': 2\n  }, [\n    '第3个列表项'\n  ])\n]);\n\nconst rDom = render(vDom1);\nrenderDOM(\n  rDom,\n  document.getElementById('app')\n);\n\nconst patches = domDiff(vDom1, vDom2);\n\ndoPatch(rDom, patches);\n\nconsole.log(patches);\n"],"sourceRoot":""}